Point Class 
	init(list)
		list (point 1, point 2, point 3,,,,,,)

Line Segment Class 
	init(Point, Point)
		Head_point (Point class)
		End_point (Point class)
		equation (<x,y,z> + t<a,b,c>) -> ((x,y,z),(a,b,c))
		####resource#####
		https://www.youtube.com/watch?v=JlRagTNGBF0 
		#################
		
Circle Class
	init(Point, radius)
		center point (Point class)
		Radius (int)
	
space Class 
	init(name, dimention)
		name (str)
		dimension(int)
		list_of_points (list<Point>)
		list_of_lines (list<Line>)
		list_of_circles (list<Circle>)
	
		add_point function() 
			create a new point class with user input, and add the point to list_of_points
			
		add_line function()
			create a new line class with user input, and add the point to list_of_lines
			
		add_circle function()
			create a new circle class with user input, and add the point to list_of_cicles
			
		display_all_entities function()
			for(i in list_of_points) 
				print(point i at ------\n)
				
			for(i in list_of_lines) 
				print(line i at ------\n)
				
			for(i in list_of_cicles) 
				print(circle i at ------\n)
			
Main()
	##variables##
	space_list
	current_space 
	#############
	
	call load_data function()
	
	while ( true )
		current_space = set_current_space()
		
		while (true) 
			ask user
			(
				1. Create point
				2. Create line
				3. Create circle
				4. Line segment intersection
				5. Closest pair of points
				6. Convex hull
				7. Largest empty circle
				8. Display all entities 
				9. save the change
				10. (possibly) Change working plane
				11. exit
			)

			If (1)
				call current_space.add_point function()
			If(2)
				call current_space.add_line function()
			If(3)
				call current_space.add_radius function()
			If(4)
				call Line_Segment_Intersection function(current_space)
			If(5)
				call Closest_Pair_of_Points function(current_space)
			If(6)
				call Convex_Hull function(current_space)
			If(7)
				Largest_empty_circle function(current_space)
			If(8)
				call current_space.display_all_entities function()
			If(9)
				update/write the json file 			
			If(10)
				break the while loop
			If(11)
				Exit the program

load_data function()
	load a jason file for spaces, create space, add them to the space_list
	
set_current_space()
	Ask user if they want to use already created plane or create new plane
	If (use already created plane)
		for ( i in space_list) 
			print(space_list[i] \n) 
		let user select a space 
		return the selected space class
	Else
		Let user create new space 
		create new space class 
		return the new space class
	
Line_Segment_Intersection function(space class)  
	if len(space.list_of_lines) >= 2
		####variables#### 
		intersection_point list 
		intersection_list list<intersection_point>
		equ1 list (a,b,c)
		equ2 list (a,b,c)
		a_val list (a, v)
		b_val list (b, v) 
		exist bool
		################# 

		for i in len(space.list_of_lines)
			for j in len(space.list_of_lines) 
				exist = true 
				while (exits)
					equ1[0] = list_of_lines[i].equation[1][0]
					equ1[1] = - list_of_lines[j].equation[1][0]
					equ1[2] = list_of_lines[j].equation[0][0] - list_of_lines[i].equation[0][0]

					equ2[0] = list_of_lines[i].equation[1][1]
					equ2[1] = - list_of_lines[j].equation[1][1]
					equ2[2] = list_of_lines[j].equation[0][1] - list_of_lines[i].equation[0][1] 

					equ1[0] = equ1[0] * equ2[0]
					equ1[1] = equ1[1] * equ2[0]
					equ1[2] = equ1[2] * equ2[0]

					equ2[0] = equ2[0] * equ1[0]
					equ2[1] = equ2[1] * equ1[0]
					equ2[2] = equ2[2] * equ1[0] 
					if(equ1[1] = -equ2[1]) 
						exist = false

					b_val[0] = equ1[1] - equ2[1]
					b_val[1] = equ1[2] - equ2[2]
					b_val[1] = b_val[1]/b_val[0]
					b_val[0] = b_val[0]/b_val[0]

					a_val[1] = equ1[2] - (equ1[1] * b_val)
					a_val[0] = equ1[0]
					a_val[1] = a_val[1]/a_val[0]
					a_val[0] = a_val[0]/a_val[0]

					for k in range(space.dimension)
						if (list_of_lines[i].equation[0][k] + a_val[1] *list_of_lines[i].equation[1][k] == list_of_lines[j].equation[0][k] + a_val[1] *list_of_lines[j].equation[1][k]) 
						else 
							exist = false 
					for l in range(space.dimension)
						intersection_point.add(list_of_lines[i].equation[l][k] + a_val[1] * list_of_lines[i].equation[l][k])
					intersection_list.add(intersection_point)
					intersection_point.clear
					exist = false
		print(ntersection_list)
	else 
		print "needs more than two lines"
	
	#####resource######
	https://socratic.org/questions/how-do-i-find-the-intersection-of-two-lines-in-three-dimensional-space
	https://www.youtube.com/watch?v=N-qUfr-rz_Y
	###################
	
	
Closest_Pair_of_Points function(space class)
	if len(list_of_points) >= 2
		point1 
		point2 
		for k in len(space.dimention)
			dist_points = dist_points + (list_of_points[0][k] - list_of_points[1][k])^2
		dist_points = sqrt(dist_points)
		closest_distance = dist_points 
		for i in len(space.list_of_points)
			dist_points = 0
			for j in len(space.list_of_points)
				for k in len(space.dimention)
					dist_points = dist_points + (list_of_points[i][k] - list_of_points[j][k])^2
				dist_points = sqrt(dist_points)
				if closest_distance >= dist_points  
					closest_distance = dist_points
					set point1 as list_of_points[i]
					set point2 as list_of_points[j] 
		print(point1, point2, closest_distance) 
	else print "needs more than two points"


Convex_Hull function(space class)
	####resource#####
	https://en.wikipedia.org/wiki/Convex_hull_algorithms
	#################

Largest_empty_circle function(space class) 
	if len(list_of_circles) >= 1 
		l_circle 
		l_circle_size = 0 
		for i in len(space.list_of_circles)
			circle_size = 3.1415 * list_of_circles.radius^2
			if circle_size >= l_circle_size
				l_circle_size = circle_size
				set l_circle as list_of_circles[i]
		print(l_circle, l_circle_size) 
	else print "no circle found"




